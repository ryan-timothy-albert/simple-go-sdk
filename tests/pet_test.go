// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"openapi"
	"openapi/internal/utils"
	"openapi/models/components"
	"openapi/models/operations"
	"testing"
)

func TestPet_PetsStoreMonday(t *testing.T) {
	ctx := context.Background()

	s := openapi.New(
		openapi.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		openapi.WithClient(createTestHTTPClient("petsStoreMonday")),
		openapi.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.PetsStoreMonday(ctx, components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
			"<value>",
		},
	}, res.Pet)

}

func TestPet_MyTestPets(t *testing.T) {
	ctx := context.Background()

	s := openapi.New(
		openapi.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		openapi.WithClient(createTestHTTPClient("myTestPets")),
		openapi.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.MyTestPets(ctx, components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
			"<value>",
			"<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
		},
	}, res.Pet)

}

func TestPet_FindPetsByStatusTypes(t *testing.T) {
	ctx := context.Background()

	s := openapi.New(
		openapi.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		openapi.WithClient(createTestHTTPClient("findPetsByStatusTypes")),
		openapi.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.FindPetsByStatusTypes(ctx, operations.StatusAvailable.ToPointer())
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pets)
	assert.Equal(t, []components.Pet{
		components.Pet{
			ID:   openapi.Int64(10),
			Name: "doggie",
			Category: &components.Category{
				ID:   openapi.Int64(1),
				Name: openapi.String("Dogs"),
			},
			PhotoUrls: []string{
				"<value>",
				"<value>",
				"<value>",
			},
		},
		components.Pet{
			ID:   openapi.Int64(10),
			Name: "doggie",
			Category: &components.Category{
				ID:   openapi.Int64(1),
				Name: openapi.String("Dogs"),
			},
			PhotoUrls: []string{
				"<value>",
				"<value>",
			},
		},
		components.Pet{
			ID:   openapi.Int64(10),
			Name: "doggie",
			Category: &components.Category{
				ID:   openapi.Int64(1),
				Name: openapi.String("Dogs"),
			},
			PhotoUrls: []string{
				"<value>",
			},
		},
	}, res.Pets)

}

func TestPet_FindPetsByTags(t *testing.T) {
	ctx := context.Background()

	s := openapi.New(
		openapi.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		openapi.WithClient(createTestHTTPClient("findPetsByTags")),
		openapi.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.FindPetsByTags(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pets)
	assert.Equal(t, []components.Pet{
		components.Pet{
			ID:   openapi.Int64(10),
			Name: "doggie",
			Category: &components.Category{
				ID:   openapi.Int64(1),
				Name: openapi.String("Dogs"),
			},
			PhotoUrls: []string{
				"<value>",
				"<value>",
				"<value>",
			},
		},
	}, res.Pets)

}

func TestPet_GetPetByIDS(t *testing.T) {
	ctx := context.Background()

	s := openapi.New(
		openapi.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		openapi.WithClient(createTestHTTPClient("getPetByIDS")),
		openapi.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.GetPetByIDS(ctx, 137396)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
			"<value>",
			"<value>",
		},
	}, res.Pet)

}

func TestPet_DeletePet(t *testing.T) {
	ctx := context.Background()

	s := openapi.New(
		openapi.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		openapi.WithClient(createTestHTTPClient("deletePet")),
		openapi.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.DeletePet(ctx, 441876, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
		},
	}, res.Pet)

}

func TestPet_UploadFile(t *testing.T) {
	ctx := context.Background()

	s := openapi.New(
		openapi.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		openapi.WithClient(createTestHTTPClient("uploadFile")),
		openapi.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.UploadFile(ctx, 565380, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.APIResponse)
	assert.Equal(t, &components.APIResponse{}, res.APIResponse)

}

func TestPet_PetsStoreTuesday(t *testing.T) {
	ctx := context.Background()

	s := openapi.New(
		openapi.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		openapi.WithClient(createTestHTTPClient("petsStoreTuesday")),
		openapi.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.PetsStoreTuesday(ctx, components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
			"<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
			"<value>",
		},
	}, res.Pet)

}

func TestPet_MyTestPetsTuesday(t *testing.T) {
	ctx := context.Background()

	s := openapi.New(
		openapi.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		openapi.WithClient(createTestHTTPClient("myTestPetsTuesday")),
		openapi.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.MyTestPetsTuesday(ctx, components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
			"<value>",
			"<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   openapi.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   openapi.Int64(1),
			Name: openapi.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
			"<value>",
			"<value>",
		},
	}, res.Pet)

}
